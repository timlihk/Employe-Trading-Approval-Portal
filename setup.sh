#!/bin/bash

# Trading Approval System - Automated Setup Script for Lazycat NAS
# This script will set up everything automatically

set -e  # Exit on any error

echo "üöÄ Trading Approval System - Automated Setup"
echo "============================================="
echo ""

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Check prerequisites
echo "Checking prerequisites..."

# Check Docker
if ! command -v docker &> /dev/null; then
    print_error "Docker is not installed. Please install Docker first."
    exit 1
fi

# Check Docker Compose
if ! command -v docker-compose &> /dev/null; then
    print_error "Docker Compose is not installed. Please install Docker Compose first."
    exit 1
fi

print_status "Docker and Docker Compose are installed"

# Check if running as root (not recommended)
if [[ $EUID -eq 0 ]]; then
   print_warning "Running as root. Consider running as a regular user with Docker permissions."
fi

# Generate secrets
echo ""
echo "üîê Generating security secrets..."

# Generate session secret
SESSION_SECRET=$(openssl rand -hex 32)
print_status "Session secret generated"

# Generate database password
POSTGRES_PASSWORD=$(openssl rand -base64 32 | tr -d '=+/' | cut -c1-25)
print_status "Database password generated"

# Prompt for admin password
echo ""
echo "üë§ Admin Account Setup"
echo "======================"
read -p "Enter admin username (default: admin): " ADMIN_USERNAME
ADMIN_USERNAME=${ADMIN_USERNAME:-admin}

echo "Enter admin password (will be hidden):"
read -s ADMIN_PASSWORD
echo ""

if [[ -z "$ADMIN_PASSWORD" ]]; then
    print_error "Admin password cannot be empty"
    exit 1
fi

# Generate password hash
print_status "Generating password hash..."
ADMIN_PASSWORD_HASH=$(python3 -c "
import bcrypt
import sys
try:
    hash = bcrypt.hashpw('$ADMIN_PASSWORD'.encode('utf-8'), bcrypt.gensalt(12))
    print(hash.decode('utf-8'))
except ImportError:
    print('Error: bcrypt not available', file=sys.stderr)
    sys.exit(1)
" 2>/dev/null || echo "")

# Fallback to Node.js if Python bcrypt fails
if [[ -z "$ADMIN_PASSWORD_HASH" ]]; then
    print_warning "Python bcrypt not available, trying Node.js..."
    ADMIN_PASSWORD_HASH=$(node -e "
        try {
            const bcrypt = require('bcryptjs');
            console.log(bcrypt.hashSync('$ADMIN_PASSWORD', 12));
        } catch (e) {
            console.error('bcryptjs not available');
            process.exit(1);
        }
    " 2>/dev/null || echo "")
fi

if [[ -z "$ADMIN_PASSWORD_HASH" ]]; then
    print_error "Could not generate password hash. Please install bcrypt (pip3 install bcrypt) or bcryptjs (npm install bcryptjs)."
    exit 1
fi

print_status "Admin password hash generated"

# Network configuration
echo ""
echo "üåê Network Configuration"
echo "========================"
read -p "Enter your NAS domain/hostname (default: lazycat.local): " DOMAIN
DOMAIN=${DOMAIN:-lazycat.local}

read -p "Enter HTTP port (default: 8080): " HTTP_PORT
HTTP_PORT=${HTTP_PORT:-8080}

read -p "Enter HTTPS port (default: 8443): " HTTPS_PORT
HTTPS_PORT=${HTTPS_PORT:-8443}

# Create .env file
echo ""
echo "üìù Creating configuration files..."

cat > .env << EOF
# Generated by setup.sh on $(date)

# Database Settings
POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

# Application Security
SESSION_SECRET=${SESSION_SECRET}

# Admin Credentials
ADMIN_USERNAME=${ADMIN_USERNAME}
ADMIN_PASSWORD_HASH=${ADMIN_PASSWORD_HASH}

# Network Configuration
DOMAIN=${DOMAIN}
HTTP_PORT=${HTTP_PORT}
HTTPS_PORT=${HTTPS_PORT}

# Application Settings
LOG_LEVEL=info
NODE_ENV=production
EOF

print_status ".env file created"

# Create SSL certificates
echo ""
echo "üîí Creating SSL certificates..."
mkdir -p nginx/ssl

openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
    -keyout nginx/ssl/key.pem \
    -out nginx/ssl/cert.pem \
    -subj "/C=US/ST=State/L=City/O=HomeNAS/CN=${DOMAIN}" \
    -addext "subjectAltName=DNS:${DOMAIN},DNS:localhost,IP:127.0.0.1" \
    2>/dev/null

print_status "SSL certificates created"

# Create Docker files if they don't exist
if [[ ! -f "docker-compose.yml" ]]; then
    print_warning "Docker Compose file not found. Please ensure all project files are present."
    echo "You need these files:"
    echo "- docker-compose.yml"
    echo "- Dockerfile"
    echo "- nginx/nginx.conf"
    echo "- package.json"
    echo "- src/ directory with application code"
    exit 1
fi

# Build and start services
echo ""
echo "üèóÔ∏è  Building and starting services..."
echo "This may take a few minutes on first run..."

docker-compose build
print_status "Docker images built"

docker-compose up -d
print_status "Services started"

# Wait for services to be ready
echo ""
echo "‚è≥ Waiting for services to start..."
sleep 30

# Check if services are running
echo ""
echo "üîç Checking service status..."
docker-compose ps

# Test the application
echo ""
echo "üß™ Testing application..."

# Wait a bit more for the app to be fully ready
sleep 10

if curl -k -f https://localhost:${HTTPS_PORT}/health &>/dev/null; then
    print_status "Application is responding!"
else
    print_warning "Application may still be starting. Check with: docker-compose logs -f app"
fi

# Display summary
echo ""
echo "üéâ Setup Complete!"
echo "=================="
echo ""
echo "Your Trading Approval System is now running!"
echo ""
echo "üì± Access URLs:"
echo "   Main Application: https://${DOMAIN}:${HTTPS_PORT}"
echo "   (or by IP):      https://$(hostname -I | awk '{print $1}'):${HTTPS_PORT}"
echo ""
echo "üë§ Admin Login:"
echo "   Username: ${ADMIN_USERNAME}"
echo "   Password: [the password you entered]"
echo ""
echo "üõ†Ô∏è  Management Commands:"
echo "   View logs:      docker-compose logs -f"
echo "   Restart:        docker-compose restart"
echo "   Stop:           docker-compose down"
echo "   Start:          docker-compose up -d"
echo ""
echo "üìÑ Configuration saved to .env file"
echo ""

# Security reminder
print_warning "Security Reminders:"
echo "   - Keep your .env file secure (contains passwords)"
echo "   - Change your admin password regularly"
echo "   - Consider using proper SSL certificates for production"
echo "   - Monitor logs regularly: docker-compose logs -f"
echo ""

print_status "Setup completed successfully!"
echo ""
echo "If you encounter any issues, check the logs with:"
echo "docker-compose logs -f"