#!/bin/bash

# Dynamic DNS Setup Script for Cloudflare
# Usage: ./setup-ddns.sh

echo "🌐 Dynamic DNS Setup for pre-trading-approval.inspirationcap.com"
echo "============================================================="
echo ""

# Check if required tools are installed
if ! command -v curl &> /dev/null; then
    echo "❌ curl not found. Please install curl first."
    exit 1
fi

if ! command -v jq &> /dev/null; then
    echo "📦 jq not found. Installing jq..."
    if command -v apt-get &> /dev/null; then
        sudo apt-get update && sudo apt-get install -y jq
    elif command -v yum &> /dev/null; then
        sudo yum install -y jq
    else
        echo "❌ Please install jq manually"
        exit 1
    fi
fi

echo "✅ Prerequisites installed"
echo ""

# Prompt for Cloudflare credentials
echo "📋 Please provide your Cloudflare details:"
echo ""
read -p "Cloudflare API Token (with Zone:Edit permissions): " API_TOKEN
read -p "Zone ID (from Cloudflare dashboard): " ZONE_ID
read -p "Domain (default: pre-trading-approval.inspirationcap.com): " DOMAIN

# Set default domain if empty
DOMAIN=${DOMAIN:-pre-trading-approval.inspirationcap.com}

echo ""
echo "🔍 Finding DNS record..."

# Get record ID
RECORD_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records?name=$DOMAIN" \
     -H "Authorization: Bearer $API_TOKEN" \
     -H "Content-Type: application/json")

RECORD_ID=$(echo $RECORD_RESPONSE | jq -r '.result[0].id // empty')

if [ -z "$RECORD_ID" ] || [ "$RECORD_ID" = "null" ]; then
    echo "⚠️  DNS record not found. Creating new A record..."
    
    # Get current public IP
    CURRENT_IP=$(curl -s https://ipv4.icanhazip.com)
    echo "🌍 Current public IP: $CURRENT_IP"
    
    # Create DNS record
    CREATE_RESPONSE=$(curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records" \
         -H "Authorization: Bearer $API_TOKEN" \
         -H "Content-Type: application/json" \
         --data "{\"type\":\"A\",\"name\":\"$DOMAIN\",\"content\":\"$CURRENT_IP\",\"ttl\":300}")
    
    RECORD_ID=$(echo $CREATE_RESPONSE | jq -r '.result.id // empty')
    
    if [ -z "$RECORD_ID" ] || [ "$RECORD_ID" = "null" ]; then
        echo "❌ Failed to create DNS record"
        echo "Response: $CREATE_RESPONSE"
        exit 1
    fi
    
    echo "✅ DNS record created with ID: $RECORD_ID"
else
    echo "✅ DNS record found with ID: $RECORD_ID"
fi

echo ""
echo "📝 Creating DDNS update script..."

# Create the update script
cat > update-cloudflare-dns.sh << EOF
#!/bin/bash

# Cloudflare DDNS Update Script
# Auto-generated by setup-ddns.sh

ZONE_ID="$ZONE_ID"
RECORD_ID="$RECORD_ID"
API_TOKEN="$API_TOKEN"
DOMAIN="$DOMAIN"

# Get current public IP
CURRENT_IP=\$(curl -s https://ipv4.icanhazip.com)

if [ -z "\$CURRENT_IP" ]; then
    echo "\$(date): Failed to get current IP" >> /tmp/ddns.log
    exit 1
fi

# Get current DNS record
DNS_IP=\$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/\$ZONE_ID/dns_records/\$RECORD_ID" \\
     -H "Authorization: Bearer \$API_TOKEN" \\
     -H "Content-Type: application/json" | jq -r '.result.content // empty')

# Update only if IP has changed
if [ "\$CURRENT_IP" != "\$DNS_IP" ]; then
    echo "\$(date): IP changed from \$DNS_IP to \$CURRENT_IP" >> /tmp/ddns.log
    
    # Update Cloudflare DNS
    RESPONSE=\$(curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/\$ZONE_ID/dns_records/\$RECORD_ID" \\
         -H "Authorization: Bearer \$API_TOKEN" \\
         -H "Content-Type: application/json" \\
         --data "{\\"type\\":\\"A\\",\\"name\\":\\"\$DOMAIN\\",\\"content\\":\\"\$CURRENT_IP\\",\\"ttl\\":300}")
    
    SUCCESS=\$(echo \$RESPONSE | jq -r '.success // false')
    
    if [ "\$SUCCESS" = "true" ]; then
        echo "\$(date): Successfully updated \$DOMAIN to \$CURRENT_IP" >> /tmp/ddns.log
    else
        echo "\$(date): Failed to update DNS: \$RESPONSE" >> /tmp/ddns.log
    fi
else
    echo "\$(date): IP unchanged (\$CURRENT_IP)" >> /tmp/ddns.log
fi
EOF

chmod +x update-cloudflare-dns.sh

echo "✅ DDNS update script created: update-cloudflare-dns.sh"
echo ""

# Test the script
echo "🧪 Testing DDNS update..."
./update-cloudflare-dns.sh

if [ $? -eq 0 ]; then
    echo "✅ DDNS test successful"
else
    echo "❌ DDNS test failed. Check /tmp/ddns.log"
    exit 1
fi

echo ""
echo "⏰ Setting up automatic updates..."

# Add to crontab
CRON_JOB="*/5 * * * * $(pwd)/update-cloudflare-dns.sh"

# Check if cron job already exists
if crontab -l 2>/dev/null | grep -q "update-cloudflare-dns.sh"; then
    echo "⚠️  Cron job already exists"
else
    # Add to crontab
    (crontab -l 2>/dev/null; echo "$CRON_JOB") | crontab -
    echo "✅ Cron job added (updates every 5 minutes)"
fi

echo ""
echo "🎉 DDNS Setup Complete!"
echo ""
echo "📋 Summary:"
echo "   • Domain: $DOMAIN"
echo "   • Current IP: $(curl -s https://ipv4.icanhazip.com)"
echo "   • Update script: $(pwd)/update-cloudflare-dns.sh"
echo "   • Log file: /tmp/ddns.log"
echo "   • Update frequency: Every 5 minutes"
echo ""
echo "🔧 Management Commands:"
echo "   • Manual update: ./update-cloudflare-dns.sh"
echo "   • View log: tail -f /tmp/ddns.log"
echo "   • Test DNS: nslookup $DOMAIN"
echo ""
echo "🌐 Your domain will automatically update when your IP changes!"
echo ""
echo "🚀 Now run: ./deploy-nas.sh to deploy your application"