version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: trading-approval-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: trading_approval
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_db_password_change_me}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
      - ./migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - trading-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d trading_approval"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Trading Approval Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: trading-approval-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Core Application Settings
      NODE_ENV: production
      PORT: 3001
      
      # Database Configuration
      DATABASE_URL: postgresql://trading_user:${POSTGRES_PASSWORD:-secure_db_password_change_me}@postgres:5432/trading_approval
      
      # Security Settings
      SESSION_SECRET: ${SESSION_SECRET:-generate_a_secure_random_32_char_key}
      
      # Admin Credentials
      ADMIN_USERNAME: ${ADMIN_USERNAME:-admin}
      ADMIN_PASSWORD_HASH: ${ADMIN_PASSWORD_HASH}
      
      # Application URLs (update with your NAS domain)
      FRONTEND_URL: https://${DOMAIN:-localhost}:${HTTPS_PORT:-8443}
      
      # Optional: Microsoft 365 Integration
      AZURE_CLIENT_ID: ${AZURE_CLIENT_ID}
      AZURE_CLIENT_SECRET: ${AZURE_CLIENT_SECRET}
      AZURE_TENANT_ID: ${AZURE_TENANT_ID}
      REDIRECT_URI: https://${DOMAIN:-localhost}:${HTTPS_PORT:-8443}/api/auth/microsoft/callback
      POST_LOGOUT_REDIRECT_URI: https://${DOMAIN:-localhost}:${HTTPS_PORT:-8443}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
      # Session Configuration
      SESSION_STORE_NO_FALLBACK: true
      
    ports:
      - "${HTTP_PORT:-8080}:3001"
    volumes:
      - app_logs:/app/logs
      - app_data:/app/data
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }).on('error', () => { process.exit(1); });"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Reverse Proxy with SSL (Nginx)
  nginx:
    image: nginx:alpine
    container_name: trading-approval-nginx
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - "${HTTPS_PORT:-8443}:443"
      - "${HTTP_REDIRECT_PORT:-8080}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health-check"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  app_logs:
    driver: local
  app_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  trading-network:
    driver: bridge